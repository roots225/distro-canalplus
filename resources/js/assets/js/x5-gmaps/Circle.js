var e=Object.assign;import{defineComponent as t,inject as r,computed as o,watch as a,onMounted as i,onBeforeUnmount as d}from"vue";import{getMaps as l}from"./x5-gmaps.es.js";import{d as s}from"./debounce.js";var n=t({name:"gmapsCircle",props:{center:{type:Object,default:void 0},clickable:{type:Boolean,default:!0},draggable:{type:Boolean,default:!1},editable:{type:Boolean,default:!1},fillColor:{type:String,default:"black"},fillOpacity:{type:[String,Number],default:.3},options:{type:Object,default:()=>({})},radius:{type:[String,Number],default:void 0},strokeColor:{type:String,default:"black"},strokeOpacity:{type:[String,Number],default:1},strokePosition:{type:[String,Number],default:0},strokeWeight:{type:[String,Number],default:3},visible:{type:Boolean,default:!0},zIndex:{type:[String,Number],default:0},delay:{type:[Number,String],default:15}},emits:["center_changed","click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","radius_changed","rightclick"],setup(t,{emit:n}){let c=null;const u=[],g=r("$getmap"),p=r("$gmapHandleError"),m=e=>p(e,"Circle"),v=o((()=>{const r=e({},t.options);return void 0!==t.center&&(r.center=t.center),void 0!==t.clickable&&(r.clickable=t.clickable),void 0!==t.draggable&&(r.draggable=t.draggable),void 0!==t.editable&&(r.editable=t.editable),void 0!==t.fillColor&&(r.fillColor=t.fillColor),void 0!==t.fillOpacity&&(r.fillOpacity=+t.fillOpacity),void 0!==t.radius&&(r.radius=+t.radius),void 0!==t.strokeColor&&(r.strokeColor=t.strokeColor),void 0!==t.strokeOpacity&&(r.strokeOpacity=+t.strokeOpacity),void 0!==t.strokePosition&&(r.strokePosition=+t.strokePosition),void 0!==t.strokeWeight&&(r.strokeWeight=+t.strokeWeight),void 0!==t.visible&&(r.visible=t.visible),void 0!==t.zIndex&&(r.zIndex=+t.zIndex),r}));a((()=>t),(()=>{c&&c.setOptions(v.value)}),{deep:!0});return i((()=>{if(!v.value.center||!v.value.radius)return m(new Error("Center and Radius properties are required by every circle. Set these as either a position prop, or a position property of the options prop."));l().then((r=>{const o=g();c=new r.Circle(e({map:o},v.value)),c?(e=>{const r=google.maps.event;u.push(r.addListener(e,"center_changed",s((()=>n("center_changed",e.getCenter())),+t.delay)),r.addListener(e,"radius_changed",s((()=>n("radius_changed",e.getRadius())),+t.delay)),r.addListener(e,"drag",s((e=>{n("drag",e.latLng.toJSON(),+t.delay),console.log("circ - drag")}))),r.addListener(e,"mousemove",s((e=>n("mousemove",e)),+t.delay)),r.addListener(e,"click",(e=>n("click",e.latLng.toJSON()))),r.addListener(e,"dblclick",(e=>n("dblclick",e.latLng.toJSON()))),r.addListener(e,"dragend",(e=>n("dragend",e.latLng.toJSON()))),r.addListener(e,"dragstart",(e=>n("dragstart",e.latLng.toJSON()))),r.addListener(e,"mousedown",(e=>n("mousedown",e.latLng.toJSON()))),r.addListener(e,"mouseout",(e=>n("mouseout",e.latLng.toJSON()))),r.addListener(e,"mouseover",(e=>n("mouseover",e.latLng.toJSON()))),r.addListener(e,"mouseup",(e=>n("mouseup",e.latLng.toJSON()))),r.addListener(e,"rightclick",(e=>n("rightclick",e))))})(c):m(new Error("There was a problem creating the shape."))})).catch((e=>m(e)))})),d((()=>{u.forEach((e=>e.remove())),l().then((e=>{c&&c.setMap(null),e.event.clearInstanceListeners(c)})).catch((e=>m(e)))})),()=>{}}});export default n;
